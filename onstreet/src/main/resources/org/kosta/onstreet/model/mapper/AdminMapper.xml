<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosta.onstreet.model.mapper.AdminMapper">

	<!-- authVO has a -->
	<resultMap type="authVO" id="memberList">
		<result column="id" property="memberVO.id"/>
		<result column="nickname" property="memberVO.nickName"/>
		<result column="address" property="memberVO.address"/>
		<result column="phone" property="memberVO.phone"/>
		<result column="email" property="memberVO.email"/>
		<result column="name" property="memberVO.name"/>
		<result column="age" property="memberVO.age"/>
		<result column="remove_user_date" property="memberVO.removeUserDate"/>
	</resultMap>
	
	<!-- artist has-a  -->
	 <resultMap type="artistVO" id="artistList">
 		<result column="id" property="memberVO.id"/>
 		<result column="nickname" property="memberVO.nickName"/>
 		<result column="address" property="memberVO.address"/>
 		<result column="phone" property="memberVO.phone"/>
 		<result column="email" property="memberVO.email"/>
 		<result column="name" property="memberVO.name"/>
 		<result column="age" property="memberVO.age"/>
 	</resultMap>
 	
 	<!-- event has a -->
 	<resultMap type="eventVO" id="eventList">
 		<result column="id" property="artistVO.memberVO.id"/>
 		<result column="nickname" property="artistVO.memberVO.nickName"/>
 	</resultMap>
	
	<!-- 정지윤 -->
	<!-- 회원 수 -->
	<select id="getTotalMemberCount" resultType="int">
		select count(*) from os_member where remove_user_date is null and id != 'admin'
	</select>
	
	<select id="getTotalMemberArtistCount" resultType="int">
		select count(*) from os_member m,os_auth a 
		where m.id=a.id
		and m.remove_user_date is null
		and a.auth_name='ROLE_ARTIST'
		and m.id != 'admin'
	</select>
	
	<!-- 탈퇴회원수 -->
	<select id="getTotalRemoveMemberCount" resultType="int">
		select count(*) from os_member where remove_user_date is not null
	</select>
	
	<!-- 회원(ROLE_MEMBER) 리스트 불러오기 -->
	<select id="getManageMemberList" resultMap="memberList" parameterType="map">
		SELECT m.id,m.nickname,m.address,m.phone,m.email,m.name,m.age,a.auth_name
		FROM (SELECT row_number() over(order by id desc) as rnum,id,nickname,address,phone,email,name,age,
		remove_user_date FROM os_member WHERE remove_user_date IS NULL) m,os_auth a
		WHERE m.id=a.id
		AND a.auth_name=#{authName}
		AND m.id != 'admin'
		AND rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
	</select>
	
		<!-- 회원(ROLE_ARTIST) 리스트 불러오기 -->
	<select id="getManageMemberArtistList" resultMap="memberList" parameterType="map">
		select t.id,t.nickname,t.address,t.phone,t.email,t.name,t.age,a.auth_name
		from(select row_number() over(order by m.id desc) as rnum,m.id,m.nickname,m.address,m.phone,m.email,m.name,m.age,
		m.remove_user_date from os_member m,os_artist t where m.remove_user_date is null and m.id=t.id and t.check_date is not null
		AND t.id != 'admin') t, 
		os_auth a
		where t.id=a.id 
		and a.auth_name=#{authName}
		AND rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
	</select>
	
	<!-- 탈퇴 회원 리스트 불러오기 -->
	<select id="getRemoveMemberList" resultMap="memberList" parameterType="map">
		SELECT m.id,m.nickname,m.address,m.phone,m.email,m.name,m.age,m.remove_user_date
		FROM (SELECT row_number() over(order by id desc) as rnum,id,nickname,address,phone,email,name,age,
		remove_user_date FROM os_member WHERE remove_user_date IS NOT NULL) m,os_auth a
		WHERE m.id=a.id
		AND a.auth_name=#{authName}
		AND rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
	</select>
	
	<!-- 회원 검색 카운트 -->
	<select id="manageSearchMemberTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM os_member
		WHERE nickname LIKE '%'||#{value}||'%'
		and remove_user_date is null
		and id != 'admin'
	</select>
	
	<!-- 회원 검색  -->
	<select id="manageSearchMember" resultMap="memberList" parameterType="map">
		SELECT rnum, m.id, m.nickname, m.name,m.age,m.phone,m.email,m.address,m.remove_user_date,a.auth_name
	 	FROM(SELECT row_number() over(order by id desc) as rnum, id, nickname,name,age,phone,email,address,remove_user_date
	 	FROM os_member WHERE nickname LIKE '%'||#{nickName}||'%') m , os_auth a
		WHERE m.id=a.id
		AND a.auth_name='ROLE_MEMBER'
		AND m.remove_user_date is null
		AND rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
	</select>
	
	<!-- 탈퇴 회원 검색 카운트 -->
	<select id="manageSearchRemoveMemberTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM os_member
		WHERE nickname LIKE '%'||#{value}||'%'
		AND remove_user_date is not null
	</select>
	
	<!-- 탈퇴 회원 검색  -->
	<select id="manageSearchRemoveMember" resultMap="memberList" parameterType="map">
		SELECT rnum, m.id, m.nickname, m.name,m.age,m.phone,m.email,m.address,m.remove_user_date,a.auth_name
	 	FROM(SELECT row_number() over(order by id desc) as rnum, id, nickname,name,age,phone,email,address,remove_user_date
	 	FROM os_member WHERE nickname LIKE '%'||#{nickName}||'%') m , os_auth a
		WHERE m.id=a.id
		AND a.auth_name='ROLE_MEMBER'
		AND m.remove_user_date is not null
		AND rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} 
	</select>
	
	<!-- 미승인 아티스트 수 -->
	<select id="getTotalCheckArtist" resultType="int">
		select count(*) from os_artist where check_date is null
	</select>
	
	<!-- 아티스트 미승인 리스트 불러오기 -->
	<select id="getCheckArtistList" resultMap="artistList" parameterType="pagingBean">
		SELECT m.id,m.nickname,m.address,m.phone,m.email,m.name,t.artist_info
		FROM (SELECT row_number() over(order by check_date desc) AS rnum, id, check_date,artist_info
		FROM os_artist WHERE check_date is null) t,os_member m
		WHERE m.id=t.id
		AND rnum between #{startRowNumber} and #{endRowNumber} 
	</select>
	
	<!-- 아티스트 승인 -->
	<update id="checkArtist" parameterType="artistVO">
		update os_artist set check_date=sysdate where id=#{memberVO.id}
	</update>
	
	<!-- 아티스트 반려 -->
	<update id="uncheckArtist" parameterType="artistVO">
		update os_artist set check_date=to_date('0001-01-01','YYYY-MM-DD') where id=#{memberVO.id}
	</update>
	
	<!-- 미승인 이벤트 수 -->
	<select id="getTotalCheckEvent" resultType="int">
		select count(*) from os_event where event_check_date is null
	</select>
	
	<!-- 미승인 이벤트 리스트 불러오기 -->
	<select id="getCheckEventList" resultMap="eventList" parameterType="pagingBean">
		SELECT m.nickname,e.event_no, e.event_title, e.event_date, e.event_write_date
		FROM (SELECT row_number() over(order by event_check_date desc) as rnum, event_check_date, event_no,
		event_title, event_image, to_char(event_date,'yyyy"년" mm"월" dd"일"') as event_date,id
		, to_char(event_write_date,'yyyy"년" mm"월" dd"일"') as event_write_date 
		FROM os_event) e, os_member m
		WHERE event_check_date IS NULL
		AND m.id=e.id
		AND rnum between #{startRowNumber} and #{endRowNumber} 
	</select>
	
	<!-- 이벤트 승인 -->
	<update id="checkEvent" parameterType="eventVO">
		update os_event set event_check_date=sysdate where event_no=#{eventNo}
	</update>
	
	<!-- 이벤트 반려 -->
	<update id="uncheckEvent" parameterType="eventVO">
		update os_event set event_check_date=to_date('0001-01-02','yyyy-mm-dd') where event_no=#{eventNo}
	</update>
	
	<!-- 게시된 이벤트 수 불러오기 -->
	<select id="manageEventListCount" resultType="int">
		select count(*) from os_event where event_check_date is not null
	</select>
	
	<!-- 게시된 이벤트 리스트 불러오기 -->
	<select id="manageEventList" resultMap="eventList" parameterType="pagingBean">
		select m.nickname,e.event_no, e.event_title, e.event_date, e.event_write_date, e.event_check_date, m.id
		from (select row_number() over(order by event_check_date desc) as rnum, event_no, event_title, to_char(event_date,'yyyy"년" mm"월" dd"일"') as event_date, 
		to_char(event_write_date,'yyyy"년" mm"월" dd"일"') as event_write_date, event_check_date,id 
		from os_event where event_check_date is not null) e, os_member m
		where m.id=e.id
		and rnum between #{startRowNumber} and #{endRowNumber} 
	</select>
	
	<!-- 이벤트 삭제 -->
	<delete id="deleteEvent" parameterType="string">
		delete from os_event where event_no=#{eventNo}
	</delete>
</mapper>