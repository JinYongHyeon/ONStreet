<?xml version="1.0" encoding="UTF-8"?>
<!-- Sql Mapper -->
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.kosta.onstreet.model.mapper.BoardMapper">

		<!-- artist has-a  -->
	 <resultMap type="artistVO" id="artistList">
 		<result column="id" property="memberVO.id"/>
 		<result column="password" property="memberVO.password"/>
 		<result column="nickname" property="memberVO.nickName"/>
 		<result column="address" property="memberVO.address"/>
 		<result column="phone" property="memberVO.phone"/>
 		<result column="email" property="memberVO.email"/>
 		<result column="name" property="memberVO.name"/>
 		<result column="age" property="memberVO.age"/>
 		<result column="remove_user_date" property="memberVO.removeUserDate"/>
 		<result column="profile" property="memberVO.profile"/>
 	</resultMap>
 	
 	<!-- eventVO has a -->
 	<resultMap type="eventVO" id="eventList">
 		<result column="id" property="artistVO.memberVO.id"/>
 		<result column="nickname" property="artistVO.memberVO.nickName"/>
 	</resultMap>
 	
 	<!-- board resultmap 설정 -->
	<resultMap type="showVO" id="showListRM">
		<result property="artistVO.memberVO.id" column="id" />
		<result property="artistVO.memberVO.nickName" column="nickname" />
		<result property="artistVO.memberVO.profile" column="profile" />
	</resultMap>
	
	<resultMap type="likeVO" id="likeListRM">
		<result property="memberVO.id" column="id" />
	</resultMap>
	
	<resultMap type="commentVO" id="commentListRM">
		<result property="memberVO.id" column="id" />
		<result property="showVO.showNo" column="showNo" />
		<result property="memberVO.nickName" column="nickName" />
		<result property="memberVO.profile" column="profile" />
	</resultMap>
	
 	<!-- noticeVO has a -->
 	<resultMap type="noticeVO" id="noticeList">
      <result property="memberVO.id" column="id"/>
      <result property="memberVO.nickName" column="nickname"/>
   </resultMap>
<!-- 공지사항 총합 -김수민 -->
<select id="getTotalNoticeCount" resultType="int">
	select count(*) from os_notice
</select>
<!-- 공지사항리스트 - 김수민 -->
<resultMap type="noticeVO" id="noticeListRM">
      <result property="memberVO.id" column="id"/>
      <result property="memberVO.nickName" column="nickname"/>
      <result property="memberVO.profile" column="profile"/>
   </resultMap>
 <select id="getNoticeList" parameterType="pagingBean" resultMap="noticeListRM">
 	select n.rnum,n.notice_no,n.notice_title,n.notice_write_date,m.nickname
    from (
	select row_number() over(order by notice_no desc) as rnum,notice_no,notice_title,
	to_char(notice_write_date,'YYYY.MM.DD')as notice_write_date,id
	from os_notice) n,os_member m 
	where n.id = m.id 
	and rnum between #{startRowNumber} and #{endRowNumber} 
	order by n.notice_no desc
 </select>
 <!-- 공지사항 상세보기 :김수민 -->
 	<select id="getNoticeDetail" resultMap="noticeListRM">
 	select n.notice_no,n.notice_title,n.notice_write_date,notice_content,m.nickName,m.profile
	from(
	select notice_no,notice_title,to_char(notice_write_date,'YYYY.MM.DD')as 
	notice_write_date,notice_content,id
	from os_notice) n,os_member m
	where n.id=m.id and n.notice_no=#{value}
 	</select>
 	<!-- 공지사항 등록 :김수민-->
 <insert id="addNotice" parameterType="noticeVO">
 <selectKey keyProperty="noticeNo" resultType="noticeVO" order="BEFORE">
 	select os_notice_seq.nextval as noticeNo from dual
 </selectKey> 
 insert into os_notice(notice_no,notice_title,notice_write_date,notice_content,id) 
 values(#{noticeNo},#{noticeTitle},sysdate,#{noticeContent},#{memberVO.id})
 </insert>
 <!--공지사항 수정:김수민 -->
 <update id="updateNotice" parameterType="noticeVO">
 update os_notice
 set 
 notice_title=#{noticeTitle},notice_content=#{noticeContent}
 where notice_no=#{noticeNo}
 </update>
 <!--공지사항 삭제:김수민 -->
 <delete id="deleteNotice">
 	delete from os_notice where notice_no=#{value}
 </delete>
 	<!-- 정지윤 -->
 	<!-- 아티스트 개수 -->
 	<select id="getTotalArtistCount" resultType="int">
		select count(*) from os_artist
	</select>

 	<!-- 아티스트 리스트 불러오기 -->
 	<select id="getArtistList" resultMap="artistList" parameterType="pagingBean">
 		  SELECT m.id, m.nickname, m.profile
	      FROM(SELECT row_number() over(order by id desc) as rnum, nickname, id, profile
	      FROM os_member WHERE remove_user_date is null) m, os_artist t, os_auth a
	      WHERE m.id=a.id AND m.id=t.id 
	      AND a.auth_name='ROLE_ARTIST'
	      AND check_date is not null 
	      AND m.id NOT IN ('admin')
	      AND rnum between #{startRowNumber} and #{endRowNumber} 
	      ORDER BY t.check_date DESC
 	</select>
 	
 	<!-- 이벤트 개수 -->
 	<select id="getTotalEventCount" resultType="int">
		select count(*) from os_event
	</select>
	
 	<!-- 이벤트 리스트 불러오기 -->
 	<select id="getEventList" resultMap="eventList" parameterType="pagingBean">
 		SELECT event_no, event_title, event_image, event_date
		FROM (SELECT row_number() over(order by event_check_date desc) as rnum, event_check_date, event_no,
		event_title, event_image, to_char(event_date,'yyyy"년" mm"월" dd"일"') as event_date FROM os_event
		WHERE event_check_date IS NOT NULL)
		WHERE rnum between #{startRowNumber} and #{endRowNumber} 
 	</select>
 	
 	<!-- 이벤트 상세보기 -->
 	<select id="findEventByNo" resultMap="eventList">
 		SELECT e.event_no, e.event_title, e.event_content, to_char(e.event_date,'yyyy"년" mm"월" dd"일"') as event_date, m.nickname
		FROM os_event e, os_member m
		WHERE m.id=e.id AND event_no=#{value}
 	</select>
 	
 	<!-- 이벤트 등록 -->
 	<insert id="addEvent" parameterType="eventVO">
 		<selectKey keyProperty="eventNo" resultType="String" order="BEFORE">
			select os_event_seq.nextval from dual
		</selectKey>
 		INSERT INTO os_event(event_no,event_title,event_content,event_image,event_write_date,event_date,id)
		VALUES(#{eventNo},#{eventTitle},#{eventContent},#{eventImage},sysdate,#{eventDate},#{artistVO.memberVO.id})
 	</insert>

	<!-- 이동욱 시작 -->
	<!-- 공연일정글 전체 갯수 불러오는 sql -->
	<select id="getTotalShowCount" resultType="int">
		select count(*) from
		os_show where 
		<![CDATA[show_date <= sysdate+14]]>
	</select>
	<!-- 공연일정 전체글 리스트 불러오기 -->
	<select id="getShowList" parameterType="pagingBean" resultMap="showListRM">
		SELECT s.show_no,s.rnum,s.show_title,m.nickname,s.show_date
		FROM(
		SELECT row_number() over(order by show_date desc) as
		rnum,show_no,show_title,
		to_char(show_date,'YYYY-MM-DD') as
		show_date,id
		FROM os_show where <![CDATA[show_date <= sysdate+14]]> 
		) s,os_member m where s.id = m.id and s.rnum
		between #{startRowNumber} and #{endRowNumber}
		order by s.show_date desc
	</select>
	<!-- 공연일정 상세보기 -->
	<select id="getShowDetail" parameterType="String"
		resultMap="showListRM">
		select
		s.id,s.show_no,s.show_title,to_char(s.show_write_date,'YYYY-MM-DD HH:MM')
		as show_write_date,s.show_content,to_char(s.show_date,'YYYY-MM-DD') as
		show_date,m.nickname,m.profile
		from OS_SHOW s, OS_member m
		where s.id= m.id and show_no=#{value}
	</select>
	<!-- 댓글 리스트 불러오기 -->
	<select id="getCommentList"
		resultMap="commentListRM">
		<!-- select c.comment_no,c.show_no,c.id,c.comment_content,c.comment_write_date,m.nickname
		from OS_COMMENT c, OS_MEMBER m
		where c.show_no=#{showNo} and c.id=m.id and
		c.comment_no between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
		order by comment_write_date asc -->
		select cm.comment_no,cm.rnum,cm.show_no,cm.id,cm.comment_content,cm.comment_write_date,cm.nickname,cm.profile
		from (
			select row_number() over(order by comment_write_date desc) as rnum, c.comment_no,c.show_no,c.id,c.comment_content,c.comment_write_date,m.nickname,m.profile
			from OS_COMMENT c, OS_MEMBER m
			where c.show_no=#{showNo} and c.id=m.id
		) cm
		where rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber} order by rnum asc
	</select>
	<!-- 댓글 총갯수 불러오기 -->
	<select id="getTotalCommentCount" resultType="int">
		select count(*) from
		OS_COMMENT where show_no=#{value}
	</select>
	<!-- 댓글등록하기 -->
	<insert id="addComment">
		INSERT INTO os_comment(comment_no,show_no,id,comment_content,comment_write_date) VALUES(os_comment_seq.nextval,#{showVO.showNo},#{memberVO.id},#{commentContent},sysdate)
	</insert>
	<!-- 공연일정 등록하기 -->
	<insert id="addShow" parameterType="showVO">
		<selectKey keyProperty="showNo" resultType="String" order="BEFORE">
			select os_show_seq.nextval from dual
		</selectKey>
		INSERT INTO os_show(show_no,show_title,show_write_date,show_content,show_date,id) 
		VALUES(#{showNo},#{showTitle},sysdate,#{showContent},#{showDate},#{artistVO.memberVO.id})
	</insert>
	<!-- 공연일정 업데이트 -->
	<update id="updateShow">
		update OS_SHOW set show_title=#{showTitle}, show_content=#{showContent},show_date=#{showDate} where show_no=#{showNo}
	</update>
	<!-- 공연삭제 -->
	<delete id="deleteShow">
		delete from OS_SHOW where show_no=#{value}
	</delete>
	
	<!-- 오늘의 공연 - 진용현 -->
	<select id="todayShow" resultMap="showListRM">
		SELECT s.show_no,s.show_title, m.nickname FROM os_show s,os_member m,os_artist a
		WHERE s.id=m.id AND m.id = a.id AND to_char(s.show_date,'yyyy-mm-dd') = to_char(sysdate,'yyyy-mm-dd') AND a.check_date IS NOT NULL
	</select>
	
	<!-- 댓글수정 -->
	<update id="updateComment">
		update OS_COMMENT set comment_content=#{commentContent} where comment_no=#{commentNo}
	</update>
	<!-- 댓글삭제 -->
	<delete id="deleteComment">
		delete from OS_COMMENT where comment_no=#{value}
	</delete>
	<!-- 좋아요 테이블에 추가 -->
	<insert id="addLike">
		insert into OS_LIKE(show_no,id) values(#{showNo},#{memberVO.id})
	</insert>
	<!-- 좋아요 누른 사람들 아이디 리스트 by showNo-->
	<select id="getLikeListByShowNo" resultType="string">
		select id from os_like where show_no=#{value}
	</select>
	<!-- 좋아요 유무 체크 -->
	<select id="likeCheck" resultType="int">
		select count(*) from OS_LIKE where show_no=#{showNo} and id=#{memberVO.id}
	</select>
	<!-- 좋아요 테이블에서 제거 -->
	<delete id="minusLike">
		delete from OS_LIKE where id=#{memberVO.id} and show_no=#{showNo}
	</delete>
	
	 	
 	<!-- 추천 아티스트 아이디 가져오기 - 진용현 -->
 	<select id="getArtistRecommendation" resultType="string">
 		SELECT s.id
		FROM (SELECT ROW_NUMBER() OVER(order by id asc) AS rnum, id,count(show_no) AS TOTALSHOW , 
		ROUND((SUM(show_like)/2)/count(show_no),1) AS AVGLIKE , SUM(show_like) AS TOTALLIKE FROM os_show
		GROUP BY id)s, os_member m,os_artist a
		WHERE rnum between 1 and 9 and s.id = m.id AND m.remove_user_date IS NULL AND s.id = a.id AND a.check_date IS NOT NULL AND s.id NOT IN ('admin')
		ORDER BY avglike DESC
 	</select>
 	
 	<!-- 추천 아티스트 부족 시 사용되는 [전체 아티스트 조회] - 진용현 -->
 	<select id="getArtistAll" resultType="string">
 	SELECT m.id
	FROM os_artist a ,os_member m
	WHERE m.id= a.id AND m.remove_user_date IS NULL AND  a.check_date IS NOT NULL AND m.id NOT IN ('admin')
 	</select>
 	
 	 <!-- 최종 추천 아티스트 정보 조회 -->
 	<select id="getArtistRecommendationList" resultType="memberVO">
 	SELECT m.id,m.nickName ,m.profile
	FROM os_member m,os_artist a
	WHERE m.id=a.id
	AND m.remove_user_date IS NULL AND a.check_date IS NOT NULL
	AND m.id = #{value}
 	</select>
	
	<!-- 좋아요 컬럼에서 -1 -->
	<update id="minusLikeCol">
		update os_show set show_like=show_like-1 where show_no=#{value}
	</update>
	<!-- 좋아요 컬럼에서 +1 -->
	<update id="addLikeCol">
		update os_show set show_like=show_like+1 where show_no=#{value}
	</update>
	<!-- 좋아요 수 가져오기 -->
	<select id="getLikeCount" resultType="int">
		select show_like from os_show where show_no=#{value} 
	</select>
	<!-- 공연일자 유효일 구하기 -->
	<select id="getDateValidity" resultType="int">
		select sysdate-show_date from OS_SHOW where show_no=#{value}
	</select>
	
	<!-- 검색[아티스트] 카운트 - 진용현 -->
	<select id="getSearchArtistTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM os_member m, os_artist a
		WHERE m.id = a.id AND a.check_date IS NOT NULL 
		AND m.nickname LIKE '%'||#{value}||'%'
		AND m.id NOT IN('admin')
	</select>
	
	<!-- 검색[아티스트] - 진용현 -->
	<select id="getSearchArtist" resultMap="artistList" parameterType="map">
		SELECT rnum, m.id, m.nickname, m.profile
	 	FROM(SELECT row_number() over(order by id desc) as rnum, id, nickname,profile,remove_user_date
	 	FROM os_member WHERE nickname LIKE '%'||#{artistName}||'%'AND id NOT IN('admin'))m , os_artist t, os_auth a
		WHERE m.id=a.id AND m.id=t.id 
		AND a.auth_name='ROLE_ARTIST'
		AND m.remove_user_date is null
		AND t.check_date is not null
		AND rnum between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
	</select>
	
	<!-- 검색[공연] 카운트 -진용현 -->
	<select id="getSearchShowTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM os_show
		WHERE show_title LIKE '%'||#{value}||'%'
	</select>
	<!-- 검색[공연] - 진용현  -->
	<select id="getSearchShow" resultMap="showListRM" parameterType="map">
		SELECT s.show_no,s.rnum,s.show_title,m.nickname,s.show_date
		FROM(
		SELECT row_number() over(order by show_date desc) as
		rnum,show_no,show_title,
		to_char(show_date,'YYYY-MM-DD') as
		show_date,id
		FROM os_show
		WHERE show_title LIKE '%'||#{showTitle}||'%'
		) s,os_member m where s.id = m.id and rnum
		between #{pagingBean.startRowNumber} and #{pagingBean.endRowNumber}
		order by show_date desc
	</select>
	<!-- 오늘날짜 가져오기 -->
	<select id="getToday" resultType="string">
		select to_char(sysdate,'yyyy-mm-dd') from dual
	</select>
	<!-- 공지사항 리스트 불러오기(공연일정 상단에 필요) -->
	<select id="getNoticeListForShowList" resultMap="noticeList">
		select n.notice_no,n.notice_title,m.nickName from OS_NOTICE n, os_member m where n.id=m.id order by n.notice_no desc
	</select>
</mapper>